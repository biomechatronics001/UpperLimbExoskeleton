classdef User_Interface_32data < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        BiroExoskeletonSystemUIFigure  matlab.ui.Figure
        RESETButton                    matlab.ui.control.Button
        TabGroup                       matlab.ui.container.TabGroup
        ParametersTab                  matlab.ui.container.Tab
        CommonGainSpinner              matlab.ui.control.Spinner
        CommonGainSpinnerLabel         matlab.ui.control.Label
        RightGainSpinner               matlab.ui.control.Spinner
        RightGainSpinnerLabel          matlab.ui.control.Label
        LeftGainSpinner                matlab.ui.control.Spinner
        LeftGainSpinnerLabel           matlab.ui.control.Label
        STOPButton                     matlab.ui.control.StateButton
        Label_2                        matlab.ui.control.Label
        Label                          matlab.ui.control.Label
        SaveDataButton                 matlab.ui.control.Button
        PortDropDown                   matlab.ui.control.DropDown
        PortDropDownLabel              matlab.ui.control.Label
        BaudRateDropDown               matlab.ui.control.DropDown
        BaudRateDropDownLabel          matlab.ui.control.Label
        ConnectButton                  matlab.ui.control.Button
        ModelDropDown                  matlab.ui.control.DropDown
        ModelDropDownLabel             matlab.ui.control.Label
        UIAxes_2                       matlab.ui.control.UIAxes
        UIAxes_3                       matlab.ui.control.UIAxes
        UIAxes_1                       matlab.ui.control.UIAxes
        UIAxes_4                       matlab.ui.control.UIAxes
    end


    properties (Access = public)
        serialConn;
        %length=100;
        timeSet;
        LKSet;
        RKSet;


        current_command_L_Set;
        current_command_R_Set;
        torque_command_L_Set;
        torque_command_R_Set;

        torque_L_Set;
        torque_R_Set;
        angle_L_Set;
        angle_R_Set;

        time=0;
        sample_time=0.01;

        h1;
        h2;
        h3;
        h4;
        h5;
        ploti=0;

        ble_datalength=32;
        rs232_datalength=20;

        wsindex=1;
        mat_save_interval=200;
        mat_ini=1;
        mat_end=200;
        m;
        isSaveData=0;

        num_variables=21;
        flag=0;
    end
    methods (Access = private)

        function serial_data_available(app,src,event)
            %app.Label.Text=fgetl(app.serialConn);
            %RxText = fscanf(app.serialConn);
            if(read(app.serialConn,1,"uint8")==165)
                if(read(app.serialConn,1,"uint8")==90)
                    %length=read(app.serialConn,1,"uint8");
                    if(read(app.serialConn,1,"uint8")==app.ble_datalength)
                        c=read(app.serialConn,app.ble_datalength-3,"uint8");

                        LK=c(1)+c(2)*256;
                        if(LK>32767)
                            LK=LK-65536;
                        end
                        LK=LK/100;

                        RK=c(3)+c(4)*256;
                        if(RK>32767)
                            RK=RK-65536;
                        end
                        RK=RK/100;

                        current_command_L=c(5)+c(6)*256;
                        if(current_command_L>32767)
                            current_command_L=current_command_L-65536;
                        end
                        current_command_L=current_command_L/100;

                        current_command_R=c(7)+c(8)*256;
                        if(current_command_R>32767)
                            current_command_R=current_command_R-65536;
                        end
                        current_command_R=current_command_R/100;

                        torque_command_L=c(9)+c(10)*256;
                        if(torque_command_L>32767)
                            torque_command_L=torque_command_L-65536;
                        end
                        torque_command_L=torque_command_L/100;

                        torque_command_R=c(11)+c(12)*256;
                        if(torque_command_R>32767)
                            torque_command_R=torque_command_R-65536;
                        end
                        torque_command_R=torque_command_R/100;

                        torque_L=c(13)+c(14)*256;
                        if(torque_L>32767)
                            torque_L=torque_L-65536;
                        end
                        torque_L=torque_L/100;

                        torque_R=c(15)+c(16)*256;
                        if(torque_R>32767)
                            torque_R=torque_R-65536;
                        end
                        torque_R=torque_R/100;

                        angle_L=c(17)+c(18)*256;
                        if(angle_L>32767)
                            angle_L=angle_L-65536;
                        end
                        angle_L=angle_L/100;   

                        angle_R=c(19)+c(20)*256;
                        if(angle_R>32767)
                            angle_R=angle_R-65536;
                        end
                        angle_R=angle_R/100;   
                        
                        current_command_R = -current_command_R;
                        angle_R = -angle_R;

                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                        app.Label.Text=num2str(app.wsindex);
                        app.Label_2.Text=num2str(0);
                        app.time=app.time+app.sample_time;
                        %app.timeSet=[app.timeSet(2:end,:);app.time]
                        app.LKSet=[app.LKSet(2:end);LK];
                        app.RKSet=[app.RKSet(2:end);RK];
                        app.current_command_L_Set=[app.current_command_L_Set(2:end); current_command_L];
                        app.current_command_R_Set=[app.current_command_R_Set(2:end); current_command_R];
                        app.torque_command_L_Set=[app.torque_command_L_Set(2:end);torque_command_L];
                        app.torque_command_R_Set=[app.torque_command_R_Set(2:end);torque_command_R];
                        app.torque_L_Set=[app.torque_L_Set(2:end); torque_L];
                        app.torque_R_Set=[app.torque_R_Set(2:end); torque_R];
                        app.angle_L_Set=[app.angle_L_Set(2:end); angle_L];
                        app.angle_R_Set=[app.angle_R_Set(2:end); angle_R];
                        

                        app.wsindex=app.wsindex+1;
                        if app.wsindex>=app.mat_save_interval
                            if(app.isSaveData ==1)
                                %assignin('base', 'NameOfNewVariable', [app.LKSet app.RKSet app.percentageSet app.torque_commandSet app.torqueSet app.current_commandSet app.currentSet])
                                app.m.data(app.mat_ini:app.mat_end,1:app.num_variables) = ...
                                    [app.LKSet app.RKSet ...
                                    app.current_command_L_Set app.current_command_R_Set ...
                                    app.torque_command_L_Set app.torque_command_R_Set ...
                                    app.torque_L_Set app.torque_R_Set ...
                                    app.angle_L_Set app.angle_R_Set ...
                                    ];
                                %app.LTSet app.RTSet ...
                                %app.LTAVSet app.RTAVSet ...
                                %app.LSAVSet app.RSAVSet ...
                                %app.percentageSet ...
                                %app.torque_commandSet app.torqueSet ...
                                %app.current_commandSet app.currentSet...
                                %app.torque_command_GPSet ...
                                %app.isStandSet];
                                app.mat_ini=app.mat_ini+app.mat_save_interval;
                                app.mat_end=app.mat_end+app.mat_save_interval;
                                %evalin('base', 'data=[]');
                            end
                            app.wsindex=1;
                        else

                        end

                        app.ploti=app.ploti+1;
                        if(app.ploti>=50)
                            app.ploti=0;
                            %app.UIAxes_1.XLim=[app.timeSet(1) app.timeSet(end,1)];
                            %app.UIAxes_2.XLim=[app.timeSet(1) app.timeSet(end,1)];
                            %app.UIAxes_3.XLim=[app.timeSet(1) app.timeSet(end,1)];
                            %app.UIAxes_4.XLim=[app.timeSet(1) app.timeSet(end,1)];
                            set(app.h1,'xdata',app.timeSet,'ydata',app.angle_L_Set);
                            %set(app.h1(2),'xdata',app.timeSet,'ydata',app.RKSet);
                            set(app.h2,'xdata',app.timeSet,'ydata',app.angle_R_Set);
                            %set(app.h2(2),'xdata',app.timeSet,'ydata',app.current_command_R_Set);
                            set(app.h3,'xdata',app.timeSet,'ydata',app.current_command_L_Set);
                            %set(app.h3(2),'xdata',app.timeSet,'ydata',app.torque_L_Set);
                            set(app.h4,'xdata',app.timeSet,'ydata',app.current_command_R_Set);
                            %set(app.h4(2),'xdata',app.timeSet,'ydata',app.torque_R_Set);
                        end
              
                    else
                        %flush(app.serialConn);
                    end
                else
                    %flush(app.serialConn);
                end
            else
            end
        end
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            app.timeSet=0.01:0.01:0.01*app.mat_save_interval;
            app.mat_end=app.mat_save_interval;

            app.LKSet=zeros(app.mat_save_interval,1);
            app.RKSet=zeros(app.mat_save_interval,1);
            app.current_command_L_Set=zeros(app.mat_save_interval,1);
            app.current_command_R_Set=zeros(app.mat_save_interval,1);
            app.torque_command_L_Set=zeros(app.mat_save_interval,1);
            app.torque_command_R_Set=zeros(app.mat_save_interval,1);
            app.torque_L_Set=zeros(app.mat_save_interval,1);
            app.torque_R_Set=zeros(app.mat_save_interval,1);
            app.angle_L_Set=zeros(app.mat_save_interval,1);
            app.angle_R_Set=zeros(app.mat_save_interval,1);
            
            serialPorts = instrhwinfo('serial');
            nPorts = length(serialPorts.SerialPorts);
            app.PortDropDown.Items=serialPorts.SerialPorts;

            app.UIAxes_1.XLim=[0 2];
            app.UIAxes_2.XLim=[0 2];
            app.UIAxes_3.XLim=[0 2];
            app.UIAxes_4.XLim=[0 2];
            app.UIAxes_1.YLim=[-30 180];
            app.UIAxes_2.YLim=[-30 180];
            app.UIAxes_3.YLim=[-1 7];
            app.UIAxes_4.YLim=[-1 7];
            app.h1=plot(app.UIAxes_1,[0 0; 0 0],[0 0;0 0]);
            app.h2=plot(app.UIAxes_2,[0 0; 0 0],[0 0;0 0]);
            app.h3=plot(app.UIAxes_3,[0 0;0 0],[0 0;0 0]);
            app.h4=plot(app.UIAxes_4,[0 0;0 0],[0 0;0 0]);

            app.wsindex=0;
        end

        % Button pushed function: ConnectButton
        function ConnectButtonPushed(app, event)
            app.wsindex=1;
            openport=app.PortDropDown.Value;
            if strcmp(app.ConnectButton.Text,'Connect')

                %app.Label.Text=app.BaudRateDropDown.Value;
                obj1 = instrfind('Type', 'serial', 'Port', openport, 'Tag', '');
                if isempty(obj1)
                    if(app.flag==0)
                        app.serialConn = serialport(openport,str2num(app.BaudRateDropDown.Value),'TimeOut',1);
                    end
                    configureCallback(app.serialConn,"byte",app.ble_datalength,@app.serial_data_available);
                    set(app.SaveDataButton, 'Enable', 'On');
                    app.ConnectButton.Text='Disconnect';
                else
                    fclose(obj1);
                    app.serialConn = obj1(1);
                end
            elseif strcmp(app.ConnectButton.Text,'Disconnect')
                app.ConnectButton.Text='Connect';
                try
                    app.flag=1;
                    configureCallback(app.serialConn,"off");
                    delete(instrfindall)
                catch e
                    errordlg(e.message);
                end
            end
        end

        % Close request function: BiroExoskeletonSystemUIFigure
        function BiroExoskeletonSystemUIFigureCloseRequest(app, event)
            try
                configureCallback(app.serialConn,"off");
            catch e
                errordlg(e.message);
            end
            delete(app)
        end

        % Value changed function: PortDropDown
        function PortDropDownValueChanged(app, event)
            serialPorts = instrhwinfo('serial');
            nPorts = length(serialPorts.SerialPorts);
            app.PortDropDown.Items=serialPorts.SerialPorts;
            %             serialPorts = serialportlist('available');
            %             nPorts = length(serialPorts);
            %             app.PortDropDown.Items=serialPorts;
        end

        % Button pushed function: SaveDataButton
        function SaveDataButtonPushed(app, event)
            if strcmp(app.SaveDataButton.Text,'Save Data')
                app.SaveDataButton.Text='Stop Record';
                app.isSaveData=1;
                app.mat_ini = 1;
                app.mat_end = 200;
                data=zeros(1,app.num_variables);
                filename=['data_', datestr(now, 'yyyy_mm_dd_HH_MM_SS'), '.mat'];
                save(filename, 'data', '-v7.3');
                app.m = matfile(filename, 'Writable', true);
            else
                app.SaveDataButton.Text='Save Data';
                app.isSaveData=0;
            end
        end

        % Value changed function: ModelDropDown
        function ModelDropDownValueChanged(app, event)
            value = app.ModelDropDown.Value;
            %value=str2num(value);
            if strcmp(value,"Constant Signal")
                mode = 1;
            elseif strcmp(value,"Sine Wave")
                mode = 2;
            elseif strcmp(value,"High Level Control")
                mode = 3;
            elseif strcmp(value,"IMU-based")
                mode = 4;
            end
            a=[165 90 app.rs232_datalength 1 mode 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
            write(app.serialConn,a,"uint8");
        end

        % Value changed function: LeftGainSpinner
        function LeftGainSpinnerValueChanged(app, event)
            value = app.LeftGainSpinner.Value;
            if(value>10)
                value=10;
            elseif(value<0)
                value=0;
            end
            bytearray=typecast(int16(value*1000), 'uint8');
            a=[165 90 app.rs232_datalength 2 bytearray(1) bytearray(2) 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
            write(app.serialConn,a,"uint8");
        end

        % Value changed function: RightGainSpinner
        function RightGainSpinnerValueChanged(app, event)
            value = app.RightGainSpinner.Value;
            if(value>10)
                value=10;
            elseif(value<0)
                value=0;
            end
            bytearray=typecast(int16(value*1000), 'uint8');
            a=[165 90 app.rs232_datalength 3 bytearray(1) bytearray(2) 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
            write(app.serialConn,a,"uint8");
        end

        % Value changed function: CommonGainSpinner
        function CommonGainSpinnerValueChanged(app, event)
            value = app.CommonGainSpinner.Value;
            if(value>10)
                value=10;
            elseif(value<0)
                value=0;
            end
            bytearray=typecast(int16(value*1000), 'uint8');
            a=[165 90 app.rs232_datalength 4 bytearray(1) bytearray(2) 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
            write(app.serialConn,a,"uint8");
        end

        % Value changed function: STOPButton
        function STOPButtonValueChanged(app, event)
            value = app.STOPButton.Value;
            if value
                app.STOPButton.BackgroundColor = 'g';
                app.STOPButton.Text = "START";
            else
                app.STOPButton.BackgroundColor = 'r';
                app.STOPButton.Text = "STOP";
            end
            a=[165 90 app.rs232_datalength 0 value 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
            write(app.serialConn,a,"uint8");
        end

        % Button pushed function: RESETButton
        function RESETButtonPushed(app, event)
            a=[165 90 app.rs232_datalength 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
            write(app.serialConn,a,"uint8");
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create BiroExoskeletonSystemUIFigure and hide until all components are created
            app.BiroExoskeletonSystemUIFigure = uifigure('Visible', 'off');
            app.BiroExoskeletonSystemUIFigure.Position = [100 100 1203 587];
            app.BiroExoskeletonSystemUIFigure.Name = 'Biro Exoskeleton  System';
            app.BiroExoskeletonSystemUIFigure.CloseRequestFcn = createCallbackFcn(app, @BiroExoskeletonSystemUIFigureCloseRequest, true);

            % Create UIAxes_4
            app.UIAxes_4 = uiaxes(app.BiroExoskeletonSystemUIFigure);
            title(app.UIAxes_4, 'Right Current Command')
            xlabel(app.UIAxes_4, 'Time [s]')
            ylabel(app.UIAxes_4, '[A]')
            app.UIAxes_4.PlotBoxAspectRatio = [1.90740740740741 1 1];
            app.UIAxes_4.XTick = [0 0.25 0.5 0.75 1 1.25 1.5 1.75 2];
            app.UIAxes_4.XTickLabel = {'0'; '0.25'; '0.5'; '0.75'; '1'; '1.25'; '1.5'; '1.75'; '2'};
            app.UIAxes_4.YTick = [-1 0 1 2 3 4 5 6 7];
            app.UIAxes_4.YTickLabel = {'-1'; '0'; '1'; '2'; '3'; '4'; '5'; '6'; '7'};
            app.UIAxes_4.XGrid = 'on';
            app.UIAxes_4.YGrid = 'on';
            app.UIAxes_4.FontUnits = 'normalized';
            app.UIAxes_4.Position = [797 16 401 253];

            % Create UIAxes_1
            app.UIAxes_1 = uiaxes(app.BiroExoskeletonSystemUIFigure);
            title(app.UIAxes_1, 'Left Motor Angle')
            xlabel(app.UIAxes_1, 'Time [s]')
            ylabel(app.UIAxes_1, '[Deg]')
            app.UIAxes_1.PlotBoxAspectRatio = [1.9171974522293 1 1];
            app.UIAxes_1.XTick = [0 0.25 0.5 0.75 1 1.25 1.5 1.75 2];
            app.UIAxes_1.XTickLabel = {'0'; '0.25'; '0.5'; '0.75'; '1'; '1.25'; '1.5'; '1.75'; '2'};
            app.UIAxes_1.YTick = [-30 0 30 60 90 120 150 180];
            app.UIAxes_1.YTickLabel = {'-30'; '0'; '30'; '60'; '90'; '120'; '150'; '180'};
            app.UIAxes_1.XGrid = 'on';
            app.UIAxes_1.YGrid = 'on';
            app.UIAxes_1.FontUnits = 'normalized';
            app.UIAxes_1.FontSize = 0.05;
            app.UIAxes_1.Position = [397 268 394 249];

            % Create UIAxes_3
            app.UIAxes_3 = uiaxes(app.BiroExoskeletonSystemUIFigure);
            title(app.UIAxes_3, 'Left Current Command')
            xlabel(app.UIAxes_3, 'Time [s]')
            ylabel(app.UIAxes_3, '[A]')
            app.UIAxes_3.PlotBoxAspectRatio = [1.91358024691358 1 1];
            app.UIAxes_3.XTick = [0 0.25 0.5 0.75 1 1.25 1.5 1.75 2];
            app.UIAxes_3.XTickLabel = {'0'; '0.25'; '0.5'; '0.75'; '1'; '1.25'; '1.5'; '1.75'; '2'};
            app.UIAxes_3.YTick = [-1 0 1 2 3 4 5 6 7];
            app.UIAxes_3.YTickLabel = {'-1'; '0'; '1'; '2'; '3'; '4'; '5'; '6'; '7'};
            app.UIAxes_3.XGrid = 'on';
            app.UIAxes_3.YGrid = 'on';
            app.UIAxes_3.FontUnits = 'normalized';
            app.UIAxes_3.Position = [393 16 401 253];

            % Create UIAxes_2
            app.UIAxes_2 = uiaxes(app.BiroExoskeletonSystemUIFigure);
            title(app.UIAxes_2, 'Right Motor Angle')
            xlabel(app.UIAxes_2, 'Time [s]')
            ylabel(app.UIAxes_2, '[Deg]')
            app.UIAxes_2.PlotBoxAspectRatio = [1.9171974522293 1 1];
            app.UIAxes_2.XTick = [0 0.25 0.5 0.75 1 1.25 1.5 1.75 2];
            app.UIAxes_2.XTickLabel = {'0'; '0.25'; '0.5'; '0.75'; '1'; '1.25'; '1.5'; '1.75'; '2'};
            app.UIAxes_2.YTick = [-30 0 30 60 90 120 150 180];
            app.UIAxes_2.YTickLabel = {'-30'; '0'; '30'; '60'; '90'; '120'; '150'; '180'};
            app.UIAxes_2.XGrid = 'on';
            app.UIAxes_2.YGrid = 'on';
            app.UIAxes_2.FontUnits = 'normalized';
            app.UIAxes_2.FontSize = 0.05;
            app.UIAxes_2.Position = [791 270 394 249];

            % Create ModelDropDownLabel
            app.ModelDropDownLabel = uilabel(app.BiroExoskeletonSystemUIFigure);
            app.ModelDropDownLabel.HorizontalAlignment = 'right';
            app.ModelDropDownLabel.Position = [97 462 38 22];
            app.ModelDropDownLabel.Text = 'Model';

            % Create ModelDropDown
            app.ModelDropDown = uidropdown(app.BiroExoskeletonSystemUIFigure);
            app.ModelDropDown.Items = {'Constant Signal', 'Sine Wave', 'High Level Control', 'IMU-based '};
            app.ModelDropDown.ValueChangedFcn = createCallbackFcn(app, @ModelDropDownValueChanged, true);
            app.ModelDropDown.Position = [150 462 142 22];
            app.ModelDropDown.Value = 'Constant Signal';

            % Create ConnectButton
            app.ConnectButton = uibutton(app.BiroExoskeletonSystemUIFigure, 'push');
            app.ConnectButton.ButtonPushedFcn = createCallbackFcn(app, @ConnectButtonPushed, true);
            app.ConnectButton.Position = [50 514 88 26];
            app.ConnectButton.Text = 'Connect';

            % Create BaudRateDropDownLabel
            app.BaudRateDropDownLabel = uilabel(app.BiroExoskeletonSystemUIFigure);
            app.BaudRateDropDownLabel.HorizontalAlignment = 'right';
            app.BaudRateDropDownLabel.Position = [139 553 62 22];
            app.BaudRateDropDownLabel.Text = 'Baud Rate';

            % Create BaudRateDropDown
            app.BaudRateDropDown = uidropdown(app.BiroExoskeletonSystemUIFigure);
            app.BaudRateDropDown.Items = {'115200', '230400', '460800'};
            app.BaudRateDropDown.Position = [216 553 76 22];
            app.BaudRateDropDown.Value = '115200';

            % Create PortDropDownLabel
            app.PortDropDownLabel = uilabel(app.BiroExoskeletonSystemUIFigure);
            app.PortDropDownLabel.HorizontalAlignment = 'right';
            app.PortDropDownLabel.Position = [12 553 28 22];
            app.PortDropDownLabel.Text = 'Port';

            % Create PortDropDown
            app.PortDropDown = uidropdown(app.BiroExoskeletonSystemUIFigure);
            app.PortDropDown.Items = {};
            app.PortDropDown.ValueChangedFcn = createCallbackFcn(app, @PortDropDownValueChanged, true);
            app.PortDropDown.Position = [55 553 72 22];
            app.PortDropDown.Value = {};

            % Create SaveDataButton
            app.SaveDataButton = uibutton(app.BiroExoskeletonSystemUIFigure, 'push');
            app.SaveDataButton.ButtonPushedFcn = createCallbackFcn(app, @SaveDataButtonPushed, true);
            app.SaveDataButton.Position = [181 516 89 22];
            app.SaveDataButton.Text = 'Save Data';

            % Create Label
            app.Label = uilabel(app.BiroExoskeletonSystemUIFigure);
            app.Label.Position = [1053 553 45 22];

            % Create Label_2
            app.Label_2 = uilabel(app.BiroExoskeletonSystemUIFigure);
            app.Label_2.Position = [1127 604 44 22];

            % Create STOPButton
            app.STOPButton = uibutton(app.BiroExoskeletonSystemUIFigure, 'state');
            app.STOPButton.ValueChangedFcn = createCallbackFcn(app, @STOPButtonValueChanged, true);
            app.STOPButton.Text = 'STOP';
            app.STOPButton.BackgroundColor = [1 0 0];
            app.STOPButton.Position = [315 516 100 59];

            % Create TabGroup
            app.TabGroup = uitabgroup(app.BiroExoskeletonSystemUIFigure);
            app.TabGroup.Position = [67 292 260 149];

            % Create ParametersTab
            app.ParametersTab = uitab(app.TabGroup);
            app.ParametersTab.Title = 'Parameters';

            % Create LeftGainSpinnerLabel
            app.LeftGainSpinnerLabel = uilabel(app.ParametersTab);
            app.LeftGainSpinnerLabel.HorizontalAlignment = 'center';
            app.LeftGainSpinnerLabel.Position = [23 92 54 22];
            app.LeftGainSpinnerLabel.Text = 'Left Gain';

            % Create LeftGainSpinner
            app.LeftGainSpinner = uispinner(app.ParametersTab);
            app.LeftGainSpinner.Step = 0.5;
            app.LeftGainSpinner.Limits = [0 10];
            app.LeftGainSpinner.ValueChangedFcn = createCallbackFcn(app, @LeftGainSpinnerValueChanged, true);
            app.LeftGainSpinner.Position = [16 70 68 22];
            app.LeftGainSpinner.Value = 1;

            % Create RightGainSpinnerLabel
            app.RightGainSpinnerLabel = uilabel(app.ParametersTab);
            app.RightGainSpinnerLabel.HorizontalAlignment = 'center';
            app.RightGainSpinnerLabel.Position = [176 92 62 22];
            app.RightGainSpinnerLabel.Text = 'Right Gain';

            % Create RightGainSpinner
            app.RightGainSpinner = uispinner(app.ParametersTab);
            app.RightGainSpinner.Step = 0.5;
            app.RightGainSpinner.Limits = [0 10];
            app.RightGainSpinner.ValueChangedFcn = createCallbackFcn(app, @RightGainSpinnerValueChanged, true);
            app.RightGainSpinner.Position = [173 70 68 22];
            app.RightGainSpinner.Value = 1;

            % Create CommonGainSpinnerLabel
            app.CommonGainSpinnerLabel = uilabel(app.ParametersTab);
            app.CommonGainSpinnerLabel.HorizontalAlignment = 'center';
            app.CommonGainSpinnerLabel.Position = [89 37 83 22];
            app.CommonGainSpinnerLabel.Text = 'Common Gain';

            % Create CommonGainSpinner
            app.CommonGainSpinner = uispinner(app.ParametersTab);
            app.CommonGainSpinner.Step = 0.5;
            app.CommonGainSpinner.Limits = [0 10];
            app.CommonGainSpinner.ValueChangedFcn = createCallbackFcn(app, @CommonGainSpinnerValueChanged, true);
            app.CommonGainSpinner.Position = [96 15 68 22];

            % Create RESETButton
            app.RESETButton = uibutton(app.BiroExoskeletonSystemUIFigure, 'push');
            app.RESETButton.ButtonPushedFcn = createCallbackFcn(app, @RESETButtonPushed, true);
            app.RESETButton.BackgroundColor = [0.0745 0.6235 1];
            app.RESETButton.Position = [433 516 100 59];
            app.RESETButton.Text = 'RESET';

            % Show the figure after all components are created
            app.BiroExoskeletonSystemUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = User_Interface_32data

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.BiroExoskeletonSystemUIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.BiroExoskeletonSystemUIFigure)
        end
    end
end
